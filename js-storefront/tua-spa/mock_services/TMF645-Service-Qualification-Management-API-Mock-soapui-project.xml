<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="9aedf6a2-121f-40c4-9dd1-a0a7d7ae5d2a" activeEnvironment="Default" name="TMF645_Service_Qualification_Management_API_Mock" resourceRoot="" soapui-version="5.7.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="5f77409f-3ba4-4b0d-97bd-e51262cfab1b" port="8080" path="/tmf-api/serviceQualificationManagement/v4" host="Kritikas-MacBook-Pro.local" name="queryServiceQualification" docroot=""><con:settings/><con:properties/><con:onRequestScript>mockRequest.httpResponse.addHeader( "Access-Control-Allow-Origin", "*" )
mockRequest.httpResponse.addHeader( "Access-Control-Allow-Headers", "*" )</con:onRequestScript><con:restMockAction name="postQueryServiceQualification" method="POST" resourcePath="/queryServiceQualification" id="f60dde0c-3283-4fc8-b6d1-5d1cb604d44f"><con:settings/><con:defaultResponse>queryServiceQualification-94121</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>
import groovy.*;
import groovy.json.*;
import groovy.json.JsonSlurper;
def jsonSlurper = new JsonSlurper()
def requestBody = mockRequest.getRequestContent()

log.info "Request body: " + requestBody
def  object =jsonSlurper.parseText(requestBody)

if(object.searchCriteria== null ||object.searchCriteria.service.place[0].postcode == null 
|| object.searchCriteria.service.place[0].postcode ==''  ){
	return "error"
}
if(object.searchCriteria.service.place[0] !=null){
	def place=object.searchCriteria.service.place[0]
	if(place.role != null || place.role != ''){
		context.role =place.role
	}
	if(place.city != null || place.city != ''){
		context.city= place.city
	}
	if(place.streetName != null || place.streetName != ''){
		context.streetName= place.streetName
	}
	if(place.streetType != null || place.streetType != ''){
		context.streetType =place.streetType
	}
	if(place.streetNr != null || place.streetNr != ''){
		context.streetNr =place.streetNr
	}
	if(place.postcode != null || place.postcode != ''){
		context.postcode=place.postcode
	}
	def postalCode= place.postcode;
	if(postalCode == '94121'){
		return "queryServiceQualification-94121"
	}
	if(postalCode == '94120'){
		return "queryServiceQualification-94120"
	}

	if((postalCode  == '8010' )|| (postalCode == '80808') || (postalCode == '93631') || (postalCode =='3011')){
		return "queryServiceQualification-utilities"
	}
		
	else{
		return "queryServiceQualification-otherPostcode"
	}
}

</con:dispatchPath><con:response name="queryServiceQualification-94121" id="d17429f5-b910-42ba-9bae-2f5b624d9d28" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"id": "54",
	"href": "http://serverlocation:port/serviceQualificationManagement/v4/queryServiceQualification/54",
	"description": "Query Service Qualification Illustration ",
	"instantSyncQualification": "true",
	"searchCriteria": {
		"id": "1",
		"service": {
			"place": [
				{
					"role": "Installation Place",
					"@type": "GeographicAddress",
					"city": "${city}",
					"postcode": "${postcode}",
					"streetName": "${streetName}",
					"streetType": "${streetType}",
					"streetNr": "${streetNr}"
				}
			]
		},
		"@type": "SearchCriteria"
	},
	"serviceQualificationItem": [
		{
			"id": "1",
			"service": {
				"serviceSpecification": {
					"id": "78",
					"href": "http://serverlocation:port/serviceCatalogManagement/v4/serviceSpecification/78",
					"name": "copper_internet_svc",
					"@type": "ServiceSpecification"
				},
				"serviceCharacteristic": [
					{
						"name": "upload_speed",
						"valueType": "String",
						"value": "100 MB/s"
					},
					{
						"name": "download_speed",
						"valueType": "String",
						"value": "100 MB/s"
					}
				],
				"@type": "Service"
			},
			"@type": "ServiceQualificationItem"
		},
		{
			"id": "2",
			"service": {
				"serviceSpecification": {
					"id": "88",
					"href": "http://serverlocation:port/serviceCatalogManagement/v4/serviceSpecification/88",
					"name": "fiber_internet_svc",
					"@type": "ServiceSpecification"
				},
				"serviceCharacteristic": [
					{
						"name": "upload_speed",
						"valueType": "String",
						"value": "500 MB/s"
					},
					{
						"name": "download_speed",
						"valueType": "String",
						"value": "500 MB/s"
					}
				],
				"@type": "Service"
			},
			"@type": "ServiceQualificationItem"
		},
		{
			"id": "3",
			"service": {
				"serviceSpecification": {
					"id": "98",
					"href": "http://serverlocation:port/serviceCatalogManagement/v4/serviceSpecification/98",
					"name": "5g_internet_svc",
					"@type": "ServiceSpecification"
				},
				"serviceCharacteristic": [
					{
						"name": "upload_speed",
						"valueType": "String",
						"value": "1 GB/s"
					},
					{
						"name": "download_speed",
						"valueType": "String",
						"value": "10 GB/s"
					}
				],
				"@type": "Service"
			},
			
			"@type": "ServiceQualificationItem"
		},
		{
			"id": "4",
			"service": {
				"serviceSpecification": {
					"id": "108",
					"href": "http://serverlocation:port/serviceCatalogManagement/v4/serviceSpecification/108",
					"name": "cable_tv_svc",
					"@type": "ServiceSpecification"
				},
				"@type": "Service"
			},
			"@type": "ServiceQualificationItem"
		},
		{
			"id": "5",
			"service": {
				"serviceSpecification": {
					"id": "118",
					"href": "http://serverlocation:port/serviceCatalogManagement/v4/serviceSpecification/118",
					"name": "satellite_tv_svc",
					"@type": "ServiceSpecification"
				},
				"@type": "Service"
			},
			"@type": "ServiceQualificationItem"
		},
		{
			"id": "6",
			"service": {
				"serviceSpecification": {
					"id": "128",
					"href": "http://serverlocation:port/serviceCatalogManagement/v4/serviceSpecification/128",
					"name": "ip_tv_svc",
					"@type": "ServiceSpecification"
				},
				"@type": "Service"
			},
			"@type": "ServiceQualificationItem"
		}
	],
	"state": "done",
	"@type": "QueryServiceQualification"
}</con:responseContent></con:response><con:response name="queryServiceQualification-94120" id="ffc686fe-d53d-477a-924e-51b48e81bf66" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"id": "55",
	"href": "http://serverlocation:port/serviceQualificationManagement/v4/queryServiceQualification/55",
	"description": "Query Service Qualification Illustration",
	"instantSyncQualification": "true",
	"searchCriteria": {
		"id": "1",
		"service": {
			"place": [
				{
					"role": "Installation Place",
					"@type": "GeographicAddress",
					"city": "${city}",
					"postcode": "${postcode}",
					"streetName": "${streetName}",
					"streetType": "${streetType}",
					"streetNr": "${streetNr}"
				}
			]
		},
		"@type": "SearchCriteria"
	},
	"serviceQualificationItem": [
		{
			"id": "1",
			"service": {
				"serviceSpecification": {
					"id": "88",
					"href": "http://serverlocation:port/serviceCatalogManagement/v4/serviceSpecification/88",
					"name": "fiber_internet_svc",
					"@type": "ServiceSpecification"
				},
				"serviceCharacteristic": [
					{
						"name": "upload_speed",
						"valueType": "String",
						"value": "500 MB/s"
					},
					{
						"name": "download_speed",
						"valueType": "String",
						"value": "500 MB/s"
					}
				],
				"@type": "Service"
			},
			"@type": "ServiceQualificationItem"
		},
		{
			"id": "2",
			"service": {
				"serviceSpecification": {
					"id": "108",
					"href": "http://serverlocation:port/serviceCatalogManagement/v4/serviceSpecification/108",
					"name": "cable_tv_svc",
					"@type": "ServiceSpecification"
				},
				"@type": "Service"
			},
			"@type": "ServiceQualificationItem"
		},
		{
			"id": "3",
			"service": {
				"serviceSpecification": {
					"id": "118",
					"href": "http://serverlocation:port/serviceCatalogManagement/v4/serviceSpecification/118",
					"name": "satellite_tv_svc",
					"@type": "ServiceSpecification"
				},
				"@type": "Service"
			},
			"@type": "ServiceQualificationItem"
		},
		{
			"id": "4",
			"service": {
				"serviceSpecification": {
					"id": "128",
					"href": "http://serverlocation:port/serviceCatalogManagement/v4/serviceSpecification/128",
					"name": "ip_tv_svc",
					"@type": "ServiceSpecification"
				},
				"@type": "Service"
			},
			"@type": "ServiceQualificationItem"
		}
	],
	"state": "done",
	"@type": "QueryServiceQualification"
}</con:responseContent></con:response><con:response name="queryServiceQualification-otherPostcode" id="b616fde4-d91c-4a99-a3af-26288c01ee8f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"id": "57",
	"href": "http://serverlocation:port/serviceQualificationManagement/v4/queryServiceQualification/57",
	"description": "Query Service Qualification Illustration",
	"instantSyncQualification": "true",
	"searchCriteria": {
		"id": "1",
		"service": {
			"place": [
				{
					"role": "Installation Place",
					"@type": "GeographicAddress",
					"city": "${city}",
					"postcode": "${postcode}",
					"streetName": "${streetName}",
					"streetType": "${streetType}",
					"streetNr": "${streetNr}"
				}
			]
		},
		"@type": "SearchCriteria"
	},
	"state": "done",
	"@type": "QueryServiceQualification"
}</con:responseContent></con:response><con:response name="error" id="98cb2c37-9e54-4a6e-97fc-0c5133097e3a" httpResponseStatus="400" mediaType="text/xml"><con:settings/><con:responseContent/></con:response><con:response name="queryServiceQualification-utilities" id="86cf15df-395e-40cd-b430-30e5fcd89ae7" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"id": "58",
	"href": "http://serverlocation:port/serviceQualificationManagement/v4/queryServiceQualification/58",
	"description": "Query Service Qualification Illustration ",
	"instantSyncQualification": "true",
	"searchCriteria": {
		"id": "1",
		"service": {
			"place": [
				{
					"role": "Installation Place",
					"@type": "GeographicAddress",
					"city": "${city}",
					"postcode": "${postcode}",
					"streetName": "${streetName}",
					"streetType": "${streetType}",
					"streetNr": "${streetNr}"
				}
			]
		},
		"@type": "SearchCriteria"
	},
	"serviceQualificationItem": [
		
		{
			"id": "1",
			"service": {
				"serviceSpecification": {
					"id": "138",
					"href": "http://serverlocation:port/serviceCatalogManagement/v4/serviceSpecification/138",
					"name": "electricity_svc",
					"@type": "ServiceSpecification"
				},
				"@type": "Service"
			},
			"@type": "ServiceQualificationItem"
		},
		{
			"id": "2",
			"service": {
				"serviceSpecification": {
					"id": "148",
					"href": "http://serverlocation:port/serviceCatalogManagement/v4/serviceSpecification/148",
					"name": "gas_svc",
					"@type": "ServiceSpecification"
				},
				"@type": "Service"
			},
			"@type": "ServiceQualificationItem"
		}
	],
	"state": "done",
	"@type": "QueryServiceQualification"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="CORS" method="OPTIONS" resourcePath="/" id="bf443938-69eb-4b08-a6ca-f15dcde0bb94"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="cors-response" id="1fb1fa61-35c1-49ba-8227-345921962dfa" httpResponseStatus="200"><con:settings/><con:responseContent/><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>GET,OPTIONS,POST,PATCH</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>