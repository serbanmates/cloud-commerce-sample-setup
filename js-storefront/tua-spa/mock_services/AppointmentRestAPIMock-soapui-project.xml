<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="9dc46894-d42f-4b45-86a0-e4e7c0da24b2" activeEnvironment="Default" name="AppointmentRestAPIMock" resourceRoot="${projectDir}" soapui-version="5.6.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:description>The Mock for Appointment Rest API </con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Username" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting></con:settings><con:restMockService id="93940bf3-d83b-49db-b72d-3e8b70067c13" port="8082" path="/tmf-api/appointment/v4" host="Ishas-MacBook-Pro.local" name="Appointment" docroot=""><con:settings/><con:startScript>def projectPath = new File(mockRunner.mockService.project.path).parent
new File(projectPath+"/appointment").mkdir()
log.info "path is " + projectPath</con:startScript><con:stopScript>def projectPath = new File(mockRunner.mockService.project.path).parent

def appointmentDir = new File(projectPath + "/appointment")

if (appointmentDir.exists()) {
	
//List and delete file if last modified is more than two days
  File[] files = appointmentDir.listFiles();
  for (File file: files) {

    long diff = new Date().getTime() - file.lastModified();

    if (diff > 2 * 24 * 60 * 60 * 1000) {
      log.info file
      file.delete();

    }

  }
}

</con:stopScript><con:properties/><con:onRequestScript>mockRequest.httpResponse.addHeader( "Access-Control-Allow-Origin", "*" )
mockRequest.httpResponse.addHeader( "Access-Control-Allow-Headers", "*" )</con:onRequestScript><con:restMockAction name="searchTimeSlot" method="POST" resourcePath="/searchTimeSlot" id="083c5093-32d1-406d-8c4f-1754e877c03f"><con:settings/><con:defaultResponse>success</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.*;
import groovy.json.JsonSlurper;
import groovy.time.TimeCategory
def jsonSlurper = new JsonSlurper()

def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

def  object =jsonSlurper.parseText(requestBody)

//Set the context relatedPlace attributes from  the request body
if(object.relatedPlace != null){
context.relatedPlaceName=object.relatedPlace.name
context.relatedPlaceRole =object.relatedPlace.role
context.relatedPlaceCity =object.relatedPlace.city
context.relatedPlacePostcode =object.relatedPlace.postcode
context.relatedPlaceStreetName =object.relatedPlace.streetName
context.relatedPlaceStreetType =object.relatedPlace.streetType
context.relatedPlaceStreetNr =object.relatedPlace.streetNr
context.relatedPlaceCountry =object.relatedPlace.country
context.relatedPlaceStateOfProvince =object.relatedPlace.stateOfProvince}
//Set the context start and end Date from the request body
context.dynamicStartDate=object.requestedTimeSlot[0].validFor.startDateTime
context.dynamicEndDate=object.requestedTimeSlot[0].validFor.endDateTime


Date currentDate  =  Date.parse("yyyy-MM-dd'T'HH:mm:ss.sss'Z'",object.requestedTimeSlot[0].validFor.startDateTime)

def format1 = "yyyy-MM-dd'T'HH:mm:ss.sss'Z'"
 startDate =currentDate.format("dd/MM/yyyy")

Date startDate =Date.parse("dd/MM/yyyy",startDate)
//Picking Up the slots from the startdate
use( TimeCategory ) {
	
 Date nextday = startDate + 1.day
       slot1ST = nextday + 12.hours
       slot1ET =nextday + 14.hours

       slot2ST =slot1ET 
       slot2ET =slot2ST + 2.hours

       slot3ST = slot2ET
       slot3ET =slot3ST +2.hours


       Date dayAfter= startDate + 2.day

       slot4ST= dayAfter  + 12.hours
       slot4ET= dayAfter + 14.hours


       slot5ST= slot4ET
       slot5ET= slot5ST +2.hours

       slot6ST = slot5ET
       slot6ET = slot6ST + 2.hours 


       context.availableSlotStartTime1 =slot1ST.format(format1)
       context.availableSlotStartTime2 = slot2ST.format(format1)
       context.availableSlotStartTime3 =slot3ST.format(format1)
       context.availableSlotStartTime4 =slot4ST.format(format1)
       context.availableSlotStartTime5 =slot5ST.format(format1)
       context.availableSlotStartTime6 =slot6ST.format(format1)

       context.availableSlotEndTime1= slot1ET.format(format1)
       context.availableSlotEndTime2= slot2ET.format(format1)
       context.availableSlotEndTime3= slot3ET.format(format1)
       context.availableSlotEndTime4= slot4ET.format(format1)
       context.availableSlotEndTime5= slot5ET.format(format1)
       context.availableSlotEndTime6= slot6ET.format(format1)	 
}
</con:dispatchPath><con:response name="success" id="5732a2b9-a6ad-4bdd-b0e1-535a20c4557f" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:responseContent>{
"id": "99",
"href": "https://host:port/appointment/searchTimeSlot/99",
"status": "created",
"searchDate": "2018-08-28T00:00:00.000Z",
"searchResult": "success",
"relatedPlace": {
          "name": "${relatedPlaceName}",
		"role": "${relatedPlaceRole}",
		"streetNr": "${relatedPlaceStreetNr}",
          "streetType": "${relatedPlaceStreetType}",
          "streetName": "${relatedPlaceStreetName}",
          "postcode": "${relatedPlacePostcode}",
          "city": "${relatedPlaceCity}",
          "country": "${relatedPlaceCountry}",
          "stateOfProvince": "${relatedPlaceStateOfProvince}",
		"@type": "geographicAddress"
       
    },
"requestedTimeSlot": [{
"validFor": {
"startDateTime": "${dynamicStartDate}",
"endDateTime": "${dynamicEndDate}"
}
}],

"availableTimeSlot": [{
"id": "365",
"href": "https://host:port/appointment/searchtimeslot/99/availableTimeSlot/365",
"validFor": {
"startDateTime": "${availableSlotStartTime1}",
"endDateTime": "${availableSlotEndTime1}"
},
"relatedParty": {
"id": "56",
"href": "https://host:port/partyManagement/individual/56",
"name": "John Doe",
"role": "technician",
"@referredType": "Individual"
}
},
{
"id": "921",
"href": "https://host:port/appointment/searchtimeslot/99/availableTimeSlot/921",
"validFor": {
"startDateTime": "${availableSlotStartTime2}",
"endDateTime": "${availableSlotEndTime2}"
},
"relatedParty": {
"id": "56",
"href": "https://host:port/partyManagement/individual/56",
"name": "John Doe",
"role": "technician",
"@referredType": "Individual"
}
},
{
"id": "325",
"href": "https://host:port/appointment/searchtimeslot/99/availableTimeSlot/325",
"validFor": {
"startDateTime": "${availableSlotStartTime3}",
"endDateTime": "${availableSlotEndTime3}"
},
"relatedParty": {
"id": "58",
"href": "https://host:port/partyManagement/individual/58",
"name": "Adam Smith",
"role": "technician",
"@referredType": "Individual"
}
},

{
"id": "326",
"href": "https://host:port/appointment/searchtimeslot/99/availableTimeSlot/326",
"validFor": {
"startDateTime": "${availableSlotStartTime4}",
"endDateTime": "${availableSlotEndTime4}"
},
"relatedParty": {
"id": "58",
"href": "https://host:port/partyManagement/individual/58",
"name": "Adam Smith",
"role": "technician",
"@referredType": "Individual"
}
},

{
"id": "327",
"href": "https://host:port/appointment/searchtimeslot/99/availableTimeSlot/327",
"validFor": {
"startDateTime": "${availableSlotStartTime5}",
"endDateTime": "${availableSlotEndTime5}"
},
"relatedParty": {
"id": "59",
"href": "https://host:port/partyManagement/individual/59",
"name": "Dave Hunt",
"role": "technician",
"@referredType": "Individual"
}
},
{
"id": "328",
"href": "https://host:port/appointment/searchtimeslot/99/availableTimeSlot/328",
"validFor": {
"startDateTime": "${availableSlotStartTime6}",
"endDateTime": "${availableSlotEndTime6}"
},
"relatedParty": {
"id": "59",
"href": "https://host:port/partyManagement/individual/59",
"name": "Dave Hunt",
"role": "technician",
"@referredType": "Individual"
}
}
]
}</con:responseContent><con:header><con:name/><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="getAppointmentById" method="GET" resourcePath="/appointment/" id="c6fab8f1-c47f-4e85-ac81-af2bee088b87"><con:settings/><con:defaultResponse>error</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

//Extract the Id from the request 
idFromRequest =  requestPath.substring(requestPath.lastIndexOf('/') + 1);

log.info "Id:" + idFromRequest

def projectPath = new File(mockOperation.mockService.project.path).parent

    // File Path based on the Id from the Request
    def file = new File(projectPath+"/appointment"+"/${idFromRequest}.txt")

    log.info "file" +  file

    // Return 404 if file/Id does not exists
    if( !file.exists() ){return "error"}

    //Set the date from the txt File
   
	context.fileText =file.getText('UTF-8')
	context.dynamicContent=context.fileText
    //Set the id from the Request
    context.id=idFromRequest

    return "response"
</con:dispatchPath><con:response name="response" id="40773a9a-957b-4b29-8bf3-d813447f2ed5" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent> { 
	"id": "${id}",
	"href": "https://localhost:8080/tmf-api/appointment/v4/appointment/${id}",
	"lastUpdate": "2019-08-21T12:11:13.683Z",
	"@schemaLocation": "https://api-appointment-v4-0-0.mybluemix.net/docs/#/",
	"@type": "Appointment",
	"@baseType": "Appointment",
	"creationDate": "2019-08-21T12:11:13.683Z",
	${dynamicContent}
 }</con:responseContent></con:response><con:response name="error" id="ca0e3e88-91b4-4394-9eef-26bad494081e" httpResponseStatus="404" mediaType="application/json"><con:settings/><con:responseContent>{
    "code": 60,
    "reason": "Resource not found",
    "message": "No resource with given id"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="postAppointment" method="POST" resourcePath="/appointment" id="b9447eb4-7757-4cfa-a97e-b60a76a48f0c"><con:settings/><con:defaultResponse>appointment-created</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.*;
import groovy.json.JsonSlurper;
def jsonSlurper = new JsonSlurper()

def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

def  object =jsonSlurper.parseText(requestBody)

log.info "Related palce :" + object.relatedPlace
//Set the contect start and end Date from the request bidy
context.dynamicStartDate=object.validFor.startDateTime
context.dynamicEndDate=object.validFor.endDateTime

//Set the context relatedPlace attributes from  the request body
if (object.relatedPlace!=null){
context.relatedPlaceId  =object.relatedPlace.id
context.relatedPlaceName=object.relatedPlace.name
context.relatedPlaceRole =object.relatedPlace.role
context.relatedPlaceCity =object.relatedPlace.city
context.relatedPlacePostcode =object.relatedPlace.postcode
context.relatedPlaceStreetName =object.relatedPlace.streetName
context.relatedPlaceStreetType =object.relatedPlace.streetType
context.relatedPlaceStreetNr =object.relatedPlace.streetNr
context.relatedPlaceCountry =object.relatedPlace.country
context.relatedPlaceStateOfProvince =object.relatedPlace.stateOfProvince
}
def projectPath = new File(mockOperation.mockService.project.path).parent

log.info "projectPath: " + projectPath

//Generate a random dynamic 
def dynamicId =Long.toHexString(Double.doubleToLongBits(Math.random()))

//Set the dynamic Id to the context
context.dynamicId=dynamicId

//Write a file with start date and end end dates
File file = new File(projectPath+"/appointment"+"/${dynamicId}.txt")
log.info "File created at the Directory : " + file
	file.write "\"validFor\":{\"startDateTime\": \"${object.validFor.startDateTime}\", \"endDateTime\" : \"${object.validFor.startDateTime}\"}"
	file.append ",\n \"status\": \"initialized\""
	
	file.append ",\n\"relatedPlace\":{ \"@type\": \"geographicAddress\" , \"role\": \"interventionAddress\" ,  \"name\": \"client's address\", \"city\": \"${object.relatedPlace.city}\" ,\"country\": \"${object.relatedPlace.country}\",\"postcode\": \"${object.relatedPlace.postcode}\",\"streetNr\": \"${object.relatedPlace.streetNr}\",\"streetName\": \"${object.relatedPlace.streetName}\",\"streetType\": \"${object.relatedPlace.streetType}\",\"stateOfProvince\": \"${object.relatedPlace.stateOfProvince}\"}"
	</con:dispatchPath><con:response name="appointment-created" id="50450f70-1a35-4170-8b76-6963c397be2a" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:responseContent>{  "validFor": {
		"startDateTime": "${dynamicStartDate}",
		"endDateTime": "${dynamicEndDate}"
    },

   "relatedPlace": {
		"name": "${relatedPlaceName}",
		"role": "${relatedPlaceRole}",
		"streetNr": "${relatedPlaceStreetNr}",
          "streetType": "${relatedPlaceStreetType}",
           "streetName": "${relatedPlaceStreetName}",
           "postcode": "${relatedPlacePostcode}",
           "city": "${relatedPlaceCity}",
           "country": "${relatedPlaceCountry}",
           "stateOfProvince": "${relatedPlaceStateOfProvince}",
		 "@type": "geographicAddress"
    },
 
    "id": "${dynamicId}",
    "href": "https://localhost:8080/tmf-api/appointment/v4/appointment/${dynamicId}",
    "lastUpdate": "2020-08-06T11:41:59.054Z",
    "@schemaLocation": "https://localhost:8080/docs/#/",
    "@type": "Appointment",
    "@baseType": "Appointment",
    "creationDate": "2020-08-06T11:41:59.054Z",
    "status": "initialized"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="CORS" method="OPTIONS" resourcePath="/" id="f354b6ab-c5e2-4fa9-aa8f-e90996e0cad3"><con:settings/><con:defaultResponse>cors-response</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="cors-response" id="7930faa2-e7d8-48da-ae99-858efc2e6ba0" httpResponseStatus="200"><con:settings/><con:responseContent/><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>GET,OPTIONS,POST,PATCH</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="patchApppointment" method="PATCH" resourcePath="/appointment" id="242817a8-1b91-4af1-836c-27ae511306a3"><con:settings/><con:defaultResponse>error</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.*;
import groovy.json.JsonSlurper;
def jsonSlurper = new JsonSlurper()

InputStream is = mockRequest.request.inputStream
BufferedReader br = new BufferedReader(new InputStreamReader(is, "UTF-8"));
StringBuilder sb = new StringBuilder()
while((s=br.readLine())!=null) {
sb.append(s)
}
String payLoad = sb.toString()
log.info "payLoad Is" + payLoad

def  object =jsonSlurper.parseText(payLoad)

def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

//get the Id from the request path 
idFromRequest =  requestPath.substring(requestPath.lastIndexOf('/') + 1);

if (object.relatedPlace!=null){
context.relatedPlaceId  =object.relatedPlace.id
context.relatedPlaceName=object.relatedPlace.name
context.relatedPlaceRole =object.relatedPlace.role
context.relatedPlaceCity =object.relatedPlace.city
context.relatedPlacePostcode =object.relatedPlace.postcode
context.relatedPlaceStreetName =object.relatedPlace.streetName
context.relatedPlaceStreetType =object.relatedPlace.streetType
context.relatedPlaceStreetNr =object.relatedPlace.streetNr
context.relatedPlaceCountry =object.relatedPlace.country
context.relatedPlaceStateOfProvince =object.relatedPlace.stateOfProvince}

	context.dynamicstatus =object.status!=null?object.status:'initialized'

if (object.validFor !=null){
	//Set the context  start date and end dates from the request body
	context.dynamicStartDate=object.validFor.startDateTime
	context.dynamicEndDate=object.validFor.endDateTime
	
	log.info "Id: "+  idFromRequest
	
	def projectPath = new File(mockOperation.mockService.project.path).parent
	
	//check if id/file exists and write the file to reflect updated time slot
	def file = new File(projectPath+"/appointment"+"/${idFromRequest}.txt")
     if( !file.exists() ){return "error"}

     file.write "\"validFor\":{\"startDateTime\": \"${object.validFor.startDateTime}\", \"endDateTime\" : \"${object.validFor.startDateTime}\"}"
	file.append ",\n \"status\": \"${context.dynamicstatus}\""
	
	file.append ",\n\"relatedPlace\":{ \"@type\": \"geographicAddress\" , \"role\": \"interventionAddress\" ,  \"name\": \"client's address\", \"city\": \"${object.relatedPlace.city}\" ,\"country\": \"${object.relatedPlace.country}\",\"postcode\": \"${object.relatedPlace.postcode}\",\"streetNr\": \"${object.relatedPlace.streetNr}\",\"streetName\": \"${object.relatedPlace.streetName}\",\"streetType\": \"${object.relatedPlace.streetType}\",\"stateOfProvince\": \"${object.relatedPlace.stateOfProvince}\"}"
		
}
	//set the context with id from the request
       context.dynamicId=idFromRequest
return "appointment-updated"

</con:dispatchPath><con:response name="appointment-updated" id="55e6e9ec-7246-481d-bd74-ae6d010830ef" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{     
    "id": "${dynamicId}",
    "href": "https://localhost:8080/tmf-api/appointment/v4/appointment/${dynamicId}",
    "lastUpdate": "2020-08-06T11:41:59.054Z",
    "@schemaLocation": "https://localhost:8080/docs/#/",
    "@type": "Appointment",
    "@baseType": "Appointment",
    "creationDate": "2020-08-06T11:41:59.054Z",
    "status":"${dynamicStatus}",
    "relatedPlace": {
		"name": "${relatedPlaceName}",
		"role": "${relatedPlaceRole}",
		"streetNr": "${relatedPlaceStreetNr}",
          "streetType": "${relatedPlaceStreetType}",
           "streetName": "${relatedPlaceStreetName}",
           "postcode": "${relatedPlacePostcode}",
           "city": "${relatedPlaceCity}",
           "country": "${relatedPlaceCountry}",
           "stateOfProvince": "${relatedPlaceStateOfProvince}"
    }
}</con:responseContent></con:response><con:response name="error" id="663851a1-7739-4678-acc6-8e2f1468a546" httpResponseStatus="404" mediaType="application/json"><con:settings/><con:responseContent>{
    "code": 60,
    "reason": "Resource not found",
    "message": "No resource with given id"
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>