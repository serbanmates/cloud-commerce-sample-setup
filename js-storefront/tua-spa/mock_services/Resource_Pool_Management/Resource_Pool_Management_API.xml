<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="1a34ff25-023c-4218-a1b8-b47424c5feb1" activeEnvironment="Default" name="ResourcePoolManagementAPIMock" resourceRoot="" soapui-version="5.6.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="1407405e-b860-4b11-8ffe-c5a5cf291d76" port="8081" path="/" host="DESKTOP-K7QBGV0" name="ResourcePoolManagementAPIMock" docroot=""><con:settings/><con:startScript>import groovy.*;
import groovy.*;
import java.nio.file.Files;
import java.nio.file.attribute.FileTime;


def projectPath = new File(mockRunner.mockService.project.path).parent
new File(projectPath+"/msisdns").mkdir()
Random rnd = new Random()
for(i=0;i &lt;=10; i++){
//generate 9 digits 10 random numbers
int num = rnd.nextInt(90000000) + 100000000;
//Create the files names with Random Numbers
def file = new File(projectPath + "/msisdns" +"/+91 7" +num+".txt")
file.createNewFile();

}

log.info "path is " + projectPath
</con:startScript><con:stopScript>import java.util.Date;

def projectPath = new File(mockRunner.mockService.project.path).parent
def subMsisdnDir = new File(projectPath + "/msisdns")
def subReservationDir = new File(projectPath + "/reservationMsisdn")
//delete the msisdn numbers in folder 
if (subMsisdnDir.exists()) {
  subMsisdnDir.deleteDir();
}
//delete the post reservation files 
if (subReservationDir.exists()) {
	
  def projectPath1 = new File(mockRunner.mockService.project.path).parent + "/reservationMsisdn"

  File targetDir = new File(projectPath1);
  if (!targetDir.exists()) {
    throw new RuntimeException(String.format("Log files directory '%s' " + "does not exist in the environment"));
  }

  File[] files = targetDir.listFiles();
  for (File file: files) {

    long diff = new Date().getTime() - file.lastModified();

    if (diff > 2 * 24 * 60 * 60 * 1000) {
      log.info file
      file.delete();

    }

  }
}</con:stopScript><con:properties/><con:onRequestScript>mockRequest.httpResponse.addHeader( "Access-Control-Allow-Origin", "*" )
mockRequest.httpResponse.addHeader( "Access-Control-Allow-Headers", "*" )
mockRequest.httpResponse.addHeader( "Access-Control-Allow-Methods", "*" )</con:onRequestScript><con:restMockAction name="postAvailabilityCheck" method="POST" resourcePath="/tmf-api/resourcePoolManagement/availabilityCheck" id="2a803cbc-7df1-40c1-ae15-2e449e7902a6"><con:description>This operation executes task to retrieve available Resource entities or to check resource pool has available Resource capacity. </con:description><con:settings/><con:defaultResponse>Create_MSISDN_Success_Response</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import java.util.List	
def msisdnList = []
def projectPath = new File(mockOperation.mockService.project.path).parent+"/msisdns/"
new File(projectPath).traverse(type: groovy.io.FileType.FILES) {
	it ->
	def var =(it.name).split("\\.")[0]
    	log.info ( (it.name).split("\\.")[0])
    	msisdnList.add(var)   
    
}

if(msisdnList.size >=6){
context.msisdn1= msisdnList.get(0)
context.msisdn2= msisdnList.get(1)
context.msisdn3= msisdnList.get(2)
context.msisdn4= msisdnList.get(3)
context.msisdn5= msisdnList.get(4)
context.msisdn6= msisdnList.get(5)

context.RandomId1=Long.toHexString(Double.doubleToLongBits(Math.random()))
context.RandomId2=Long.toHexString(Double.doubleToLongBits(Math.random()))
context.RandomId3=Long.toHexString(Double.doubleToLongBits(Math.random()))
context.RandomId4=Long.toHexString(Double.doubleToLongBits(Math.random()))
context.RandomId5=Long.toHexString(Double.doubleToLongBits(Math.random()))
context.RandomId6=Long.toHexString(Double.doubleToLongBits(Math.random()))


return "success_response"}</con:dispatchPath><con:response name="success_response" id="7fc40eaf-d8b7-4008-bdb2-1f13eeecd147" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{ 
"appliedResourceCapacity" :
 { 
	"appliedCapacityAmount" : "6",
 	"resource" : [ 
	{
		"id": "${RandomId1}", 
		"href": " http://server:port/resourceInventoryManagement/logicalResource/${RandomId1}", 
		"referredType":"phone number", 
	     "value":"${msisdn1}"
	 }, 
	{
		"id": "${RandomId2}", 
		"href": " http://server:port/resourceInventoryManagement/logicalResource/${RandomId2}",
		"referredType":"phone number", 
	     "value":"${msisdn2}"
	 }, 
	{
		"id": "${RandomId3}",
		"href": " http://server:port/resourceInventoryManagement/logicalResource/${RandomId3}", 
		"referredType":"phone number", 
		"value":"${msisdn3}" 
	}, 
	{
		"id": "${RandomId4}",
		"href": " http://server:port/resourceInventoryManagement/logicalResource/${RandomId4}",
		"referredType":"phone number", 
		"value":"${msisdn4}" 
	}, 
     {
	     "id": "${RandomId5}",
	     "href": " http://server:port/resourceInventoryManagement/logicalResource/${RandomId5}", 
	     "referredType":"phone number", 
	     "value":"${msisdn5}"
	},
	{
         "id": "${RandomId6}",
         "href": " http://server:port/resourceInventoryManagement/logicalResource/${RandomId6}",
         "referredType": "phone number",
         "value": "${msisdn6}"
     }
	] 
	} 
} </con:responseContent></con:response></con:restMockAction><con:restMockAction name="CORS" method="OPTIONS" resourcePath="/" id="252a30bc-0b54-419b-9593-4f9b9b04dda0"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="cors-response" id="160faa0c-60e2-4638-957c-c879913c07a4" httpResponseStatus="200" mediaType="application/xml"><con:settings/><con:responseContent/><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>GET,OPTIONS,POST,PATCH</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="postReservation" method="POST" resourcePath="/tmf-api/resourcePoolManagement/reservation" id="c42d726b-8472-4320-b946-a43ccf069d43"><con:settings/><con:defaultResponse>reservation_created</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy.*;
import groovy.json.*;
import groovy.json.JsonSlurper;
def jsonSlurper = new JsonSlurper()
def requestBody = mockRequest.getRequestContent()
def  object =jsonSlurper.parseText(requestBody)
relatedParty = null
if(object.relatedParty!=null){
relatedParty= object.relatedParty[0]
context.relatedPartyId = relatedParty.id
context.relatedPartyRole = relatedParty.role
context.relatedPartyhref=relatedParty.href
}
productOffering = object.productOffering
log.info  "ProductOffering :" + productOffering
if(productOffering==null)
{return "error"}
//Updated Product Offering Info
context.productOfferingId = productOffering.id
context.productOfferingName = productOffering.name
context.productOfferinghref=productOffering.href
resource=object.reservationItem[0].appliedCapacityAmount[0].resource[0]
//Updating the resource object to response 
context.id=resource.id
context.href=resource.href
context.value=resource.value
context.phonenumber=resource.referredType
log.info "resource" + resource
//Generate a random dynamic 
def dynamicId =Long.toHexString(Double.doubleToLongBits(Math.random()))
//Set the dynamic reservation  Id to the context
context.dynamicId=dynamicId
def requestPath = mockRequest.getPath()
def projectPath = new File(mockOperation.mockService.project.path).parent
def msisdnFiles = new File(projectPath+"/msisdns/"+"${resource.value}"+".txt")
log.info (msisdnFiles)
if( !msisdnFiles.exists() ){ return "error"}
boolean fileIsDeleted=msisdnFiles.delete();
log.info("fileIsDeleted"+fileIsDeleted);
Random rnd = new Random()
for (i=0; i &lt; 1; i++) {
	int num = rnd.nextInt(90000000) + 100000000;
	def newMSISDN = new File(projectPath + "/msisdns/" +"/+91 7" +num+".txt")
	newMSISDN.createNewFile()
	log.info(newMSISDN)
}
def inputFile;
new File(projectPath+"/reservationMsisdn").mkdir() 
if(relatedParty == null){
	log.info "related part id is null"
	inputFile = new File(projectPath+"/reservationMsisdn/"+"anonymous_"+context.dynamicId+".txt")
}
else{
	inputFile = new File(projectPath+"/reservationMsisdn/"+relatedParty.id+"_"+context.dynamicId+".txt")
}
if(inputFile.exists())
{
 log.info("A file named " + fileName + " already exisits in the same folder")
}
else
{
 inputFile.write " {\"id\": \"${context.dynamicId}\""
 inputFile.append ",\n \"href\" :\"https://hostname:port/ResourcePoolManagement/reservation/${context.dynamicId}\""
 inputFile.append ",\n  \"@type\": \"resourceItemReservation\",\n  \"reservationState\": \"Completed\" "
 if(relatedParty != null){
inputFile.append ",\n  \"relatedParty\": [{ "
inputFile.append " \n  \"role\": \"${context.relatedPartyRole}\" "
 inputFile.append ",\n  \"id\": \"${context.relatedPartyId}\""
 inputFile.append ",\n  \"href\": \"http://hostname:port/partyRole/${context.relatedPartyId}\""  
 inputFile.append "\n   }]"
 }
 inputFile.append ",\n  \"productOffering\": { "
 inputFile.append " \n  \"id\": \"${context.productOfferingId}\" "
 inputFile.append ",\n  \"name\": \"${context.productOfferingName}\""
 inputFile.append ",\n  \"href\": \"http://hostname:port/productOffering/${context.productOfferingId}\""  
 inputFile.append "\n   }"
  inputFile.append ",\n  \"reservationItem\": ["
 inputFile.append " \n  { "
 inputFile.append " \n  \"quantity\": \"1\""
 inputFile.append ",\n  \"resourceCapacity\": [{"
 inputFile.append " \n   \"resourceCapacityDemandAmount\": \"1\""
 inputFile.append ",\n  \"@type\": \"phone number\""
 inputFile.append " \n  }]"
 inputFile.append " ,\n  \"appliedCapacityAmount\": [{"
 inputFile.append " \n  \"appliedCapacityAmount\": \"1\""
 inputFile.append ",\n  \"resource\":["
 inputFile.append " \n  {"
 inputFile.append " \n   \"id\": \"${resource.id}\""
 inputFile.append ",\n   \"href\":  \"${resource.href}\""
 inputFile.append ",\n   \"referredType\": \"phone number\""
 inputFile.append ",\n   \"value\": \"${resource.value}\""
 inputFile.append " \n  }"
 inputFile.append " \n  ]"
 inputFile.append " \n  }]"
 inputFile.append " \n  }"
 inputFile.append " \n  ]"
 inputFile.append " \n  }"
}
//* take the phone number -> either rename file or delete the files from 
//the project and add one file ( with the next sequence)
if(relatedParty != null){
	return "reservation_created"
}else {
	return "reservation_created_anonymous"
}</con:dispatchPath><con:response name="reservation_created" id="6eae6c0c-320f-4ba0-9e02-5a30563a4f63" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "id":"${dynamicId}",
    "href":"https://hostname:port/ResourcePoolManagement/reservation/${dynamicId}",
    "@type":"resourceItemReservation",
    "reservationState":"Completed",
    "relatedParty":[{
       "role":"${relatedPartyRole}",
       "id":"${relatedPartyId}",
       "href":"https://hostname:port/b2ctelcotmfwebservices/v2/partyRole/${relatedPartyId}"
    }],
     "productOffering" : {         
	     "id" :   "${productOfferingId}",        
	     "href" : "https://hostname:port/b2ctelcotmfwebservices/v2/productOffering/${productOfferingId}",        
	     "name" : "${productOfferingName}"      
	  },  
    "reservationItem":[
       {
          "quantity":"1",
          "resourceCapacity":[{
             "resourceCapacityDemandAmount":"1",
             "@type":"phone number"
          }],
          "appliedCapacityAmount":[{
             "appliedCapacityAmount":"1",
             "resource":[
                {
                   "id":"${id}",
                   "href":"${href}",
                   "referredType":"phone number",
                   "value":"${value}"
                }
             ]
          }],
          "subReservationState":"Completed"
       }
    ]
}</con:responseContent></con:response><con:response name="error" id="7481426d-a903-4064-870e-332346dd45d6" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent/></con:response><con:response name="reservation_created_anonymous" id="ca5cea22-7e61-42e5-af3f-d432dd17c82a" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "id":"${dynamicId}",
    "href":"https://hostname:port/ResourcePoolManagement/reservation/${dynamicId}",
    "@type":"resourceItemReservation",
    "reservationState":"Completed",
     "productOffering" : {         
	     "id" :   "${productOfferingId}",        
	     "href" : "https://hostname:port/b2ctelcotmfwebservices/v2/productOffering/${productOfferingId}",        
	     "name" : "${productOfferingName}"      
	  },  
    "reservationItem":[
       {
          "quantity":"1",
          "resourceCapacity":[{
             "resourceCapacityDemandAmount":"1",
             "@type":"phone number"
          }],
          "appliedCapacityAmount":[{
             "appliedCapacityAmount":"1",
             "resource":[
                {
                   "id":"${id}",
                   "href":"${href}",
                   "referredType":"phone number",
                   "value":"${value}"
                }
             ]
          }],
          "subReservationState":"Completed"
       }
    ]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="getReservationList" method="GET" resourcePath="/tmf-api/resourcePoolManagement/reservation" id="d4650cf3-6fa7-4599-ae7b-0211fa1dfb49"><con:settings/><con:defaultResponse>reservation_list</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy. * ;
import groovy.json. * ;
import groovy.json.JsonSlurper;
import java.util.List;

def requestPath = mockRequest.getPath()
log.info "Path: " + requestPath

def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + mockRequest.getRequest()

def queryParameter = mockRequest.getRequest().getParameterValues("relatedParty.id")
def queryParameter1 = mockRequest.getRequest().getParameterValues("reservationItem.appliedCapacityAmount.resource.value")
//log.info(queryParameter[0])

log.info(queryParameter1[0])
for (String numbers:queryParameter1){
	//log.info(numbers)
}

def reservationFileList = []
def projectPath = new File(mockOperation.mockService.project.path).parent + "/reservationMsisdn"
new File(projectPath).traverse(type: groovy.io.FileType.FILES) {
  it ->
  if (it.name.contains(queryParameter[0])) {
    reservationFileList.add(it)
  }
}
log.info(reservationFileList)
//open reading//match value
log.info(reservationFileList.size)
String response;
if (reservationFileList.size != 0) {
  int i = 0;
  response = "["
  for (File it: reservationFileList) {
    it.eachLine {
      line ->response = response.concat(line)
    }
   if(i != (reservationFileList.size - 1)){
      response = response.concat(",")
     }
     i++
  }
  response = response.concat("]")

  context.responseObject = JsonOutput.prettyPrint(response)
}
else{
	return "error"
}
</con:dispatchPath><con:response name="reservation_list" id="4c1b4db8-854c-409e-bfc7-63bfa8da26f5" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>${responseObject}</con:responseContent></con:response><con:response name="error" id="748ed682-cabf-4ff2-a751-dd36455c6a5c" httpResponseStatus="400"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="patchReservation" method="PATCH" resourcePath="/tmf-api/resourcePoolManagement/reservation" id="06272a83-3caf-46fb-ab62-0072fdaa9086"><con:settings/><con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">reservation_updated</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>import groovy. * ;
import groovy.json.JsonSlurper;
import groovy.json.JsonBuilder;
def jsonSlurper = new JsonSlurper()
def requestPath = mockRequest.getPath()

idFromRequest = requestPath.substring(requestPath.lastIndexOf('/') + 1);

InputStream is = mockRequest.request.inputStream
BufferedReader br = new BufferedReader(new InputStreamReader(is, "UTF-8"));
StringBuilder sb = new StringBuilder()

while ((s = br.readLine()) != null) {
  sb.append(s)
}
String payLoad = sb.toString()

def object = jsonSlurper.parseText(payLoad)

resourceid = object.value


def projectPath = new File(mockOperation.mockService.project.path).parent+"/reservationMsisdn"

log.info(projectPath)
def reservationFileList = []
File updatedResourceFile; 
new File(projectPath).traverse(type: groovy.io.FileType.FILES) {
	it ->  
    if(it.name.contains("${idFromRequest}")) {
    	reservationFileList.add(it) 
    	  updatedResourceFile=it;
} }

def response = "";

for (File it: reservationFileList) {
  it.eachLine {
    line ->response = response.concat(line)
  }
}

def formatedText = jsonSlurper.parseText(response)

formatedText.reservationItem[0].appliedCapacityAmount[0].resource[0].putAt("id", "${resourceid.id}");
//formatedText.reservationItem[0].appliedCapacityAmount[0].resource[0].putAt("@referredType", "${resourceid.type}");
formatedText.reservationItem[0].appliedCapacityAmount[0].resource[0].putAt("href", "${resourceid.href}");
formatedText.reservationItem[0].appliedCapacityAmount[0].resource[0].putAt("value", "${resourceid.value}");

def jsonOut = new JsonBuilder(formatedText).toPrettyString()
log.info "json out is :" + jsonOut
updatedResourceFile.write(jsonOut)

context.responseObject = jsonOut

def projectMSISDNPath= new File(mockOperation.mockService.project.path).parent
def msisdnFiles = new File(projectMSISDNPath+"/msisdns/"+"${resourceid.value}"+".txt")

log.info (msisdnFiles)
if( !msisdnFiles.exists() ){ return "error"}

boolean fileIsDeleted=msisdnFiles.delete();
log.info("file Is Deleted"+fileIsDeleted);

Random rnd = new Random()
for (i=0; i &lt; 1; i++) {
	
	int num = rnd.nextInt(90000000) + 100000000;
	def newMSISDN = new File(projectMSISDNPath + "/msisdns/" +"/+91 7" +num+".txt")
	newMSISDN.createNewFile()
	log.info(newMSISDN)
}
</con:dispatchPath><con:response name="reservation_updated" id="65acf133-7081-4d92-97f1-3699a79dcf73" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>${responseObject}</con:responseContent></con:response><con:response name="error" id="ba38d392-85c4-4d86-87f6-db105ec756cb" httpResponseStatus="400"><con:settings/><con:responseContent/></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>